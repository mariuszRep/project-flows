services:
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: mcp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp_tasks}
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user} -d ${POSTGRES_DB:-mcp_tasks}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mcp-server:
    build:
      context: ./mcp
      dockerfile: Dockerfile
    container_name: mcp-server
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-mcp_user}:${POSTGRES_PASSWORD:-mcp_password}@postgres:5432/${POSTGRES_DB:-mcp_tasks}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: ui
    ports:
      - "80:80"
    depends_on:
      - mcp-server
    networks:
      - app-network
    restart: unless-stopped

  db-admin:
    image: adminer
    container_name: db-admin
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
